import React from 'react'
import { Provider } from 'react-redux'
import { renderToString } from 'react-dom/server'
import { StaticRouter } from 'react-router'
import { renderRoutes } from 'react-router-config'

import path from 'path'
import { ChunkExtractor } from '@loadable/server'

import routes from '../client/app/routes'

export /**
 * Build and return the html file with the rendered react app
 *
 * @param {string} location
 * @param {object} context
 * @param {object} store
 * @returns
 */
const getBody = (location, context, store) => {
  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve(
    __dirname,
    '../public/dist/client/loadable-stats.json'
  )

  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile })

  // Wrap your application using "collectChunks"
  const jsx = extractor.collectChunks(
    <Provider store={store}>
      <StaticRouter location={location} context={context}>
        {renderRoutes(routes)}
      </StaticRouter>
    </Provider>
  )

  const html = renderToString(jsx)

  // You can now collect your script tags
  const scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();

  // You can also collect your "preload/prefetch" links
  const linkTags = extractor.getLinkTags() // or extractor.getLinkElements();

  // And you can even collect your style tags (if you use "mini-css-extract-plugin")
  const styleTags = extractor.getStyleTags() // or extractor.getStyleElements();

  return `
  <!DOCTYPE html>
  <html>
    <head>
    <title></title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    ${linkTags}
    ${styleTags}
    </head>
    <body>
      <div id="root">${html}</div>
      <script>
        window.__PRELOADED_STATE__ = ${JSON.stringify(store.getState(), null)}
      </script>
      ${scriptTags}
    </body>
  </html>`
}
